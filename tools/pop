#!/bin/bash
# Pipe Network PoP Node Management Tools
# Main entry script for the command line interface

# Define version - this is the authoritative version
VERSION="v0.0.2"
VERSION_LOCKED="true"  # Flag to prevent other modules from changing our version
PIPE_VERSION="1.0.0"

# Set up paths
if [[ -z "$ROOT_DIR" ]]; then
  # Determine script location for relative paths
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

# Define common paths
SRC_DIR="${ROOT_DIR}/src"
TOOLS_DIR="${ROOT_DIR}/tools"
BIN_DIR="${ROOT_DIR}/bin"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_debug() { if [ "$DEBUG" = "true" ]; then echo -e "${CYAN}[DEBUG]${NC} $1"; fi; }

# Default installation directories
SYSTEM_INSTALL_DIR="/opt/pipe-pop"
USER_INSTALL_DIR="${HOME}/.local/share/pipe-pop"

# Load version from file if available and not locked
if [[ -f "${BIN_DIR}/version.txt" && "$VERSION_LOCKED" != "true" ]]; then
  VERSION=$(cat "${BIN_DIR}/version.txt")
fi

# Display version information - the definitive version display function
show_version() {
  # Always use our fixed version regardless of what other modules might set
  echo -e "Pipe Network PoP Node Management Tools ${CYAN}v0.0.2${NC}"
  echo "For more information, visit: https://pipenetwork.io/pop-node"
  return 0
}

# Display help information
show_help() {
  echo "Pipe Network PoP Node Management Tools"
  echo -e "Usage: pop [COMMAND] [OPTIONS]"
  echo ""
  echo "Commands:"
  echo "  status                Show node status"
  echo "  start                 Start node services"
  echo "  stop                  Stop node services"
  echo "  restart               Restart node services"
  echo "  logs                  View service logs"
  echo "  configure             Manage node configuration"
  echo "  wallet                Manage wallet settings"
  echo "  pulse                 View real-time metrics"
  echo "  dashboard             Open interactive dashboard"
  echo "  history               View historical metrics"
  echo ""
  echo "Options:"
  echo "  --help, -h            Show this help message"
  echo "  --version, -v         Show version information"
  echo "  --debug               Enable debug output"
  echo "  --quiet, -q           Suppress all output except errors"
  echo ""
  echo "For more information, see the documentation."
}

# Set debug mode if requested
DEBUG="false"
QUIET="false"

# Parse for debug flag early
for arg in "$@"; do
  if [[ "$arg" == "--debug" ]]; then
    DEBUG="true"
    break
  fi
done

log_debug "Initial VERSION: $VERSION"

# Save the version display function to prevent it from being overridden
eval "$(declare -f show_version | sed 's/show_version/original_show_version/')"

# Check for installation commands
if [[ "$1" == "--install" ]]; then
  # Source installation module
  source "${SRC_DIR}/core/install.sh"
  # Call the installation function with remaining arguments
  install_global_command "${@:2}"
  exit $?
elif [[ "$1" == "--uninstall" ]]; then
  # Source installation module
  source "${SRC_DIR}/core/install.sh"
  # Call the uninstallation function with remaining arguments
  uninstall_global_command "${@:2}"
  exit $?
fi

# Source the command parser module if available
if [[ -f "${SRC_DIR}/core/command.sh" ]]; then
  log_debug "Sourcing command.sh..."
  # Temporary wrapper to prevent show_version from being overridden during source
  source "${SRC_DIR}/core/command.sh"
  log_debug "After sourcing command.sh, VERSION: $VERSION"
  
  # Force restore our version and version function
  VERSION="v0.0.2"
  # Restore the original show_version function if it was overridden
  if ! declare -f show_version > /dev/null; then
    eval "$(declare -f original_show_version | sed 's/original_show_version/show_version/')"
  fi
  log_debug "Ensured VERSION is: $VERSION"
  
  # Make sure our display version function is never overridden
  if [ "$(type -t handle_command)" = "function" ]; then
    log_debug "Wrapping handle_command to preserve version display"
    
    # Rename the original handle_command
    eval "$(declare -f handle_command | sed 's/handle_command/original_handle_command/')"
    
    # Create our wrapper function
    handle_command() {
      # Handle version flag directly
      if [[ "$1" == "--version" || "$1" == "-v" ]]; then
        original_show_version
        return 0
      fi
      
      # For all other commands, pass to the original handler
      original_handle_command "$@"
      return $?
    }
  fi
else
  log_debug "command.sh not found"
fi

# Source the privilege helper if available
if [[ -f "${SRC_DIR}/core/privilege.sh" ]]; then
  source "${SRC_DIR}/core/privilege.sh"
fi

# Source the fleet manager if available
if [[ -f "${SRC_DIR}/fleet/manager.sh" ]]; then
  source "${SRC_DIR}/fleet/manager.sh"
fi

# Reset version again to ensure it's not changed by other modules
VERSION="v0.0.2"

# Setup fallback handlers
setup_fallbacks() {
  # Create a data directory for temporary metrics if it doesn't exist
  local tmp_dir="${HOME}/.cache/pipe-pop/metrics"
  if [[ ! -d "$tmp_dir" ]]; then
    mkdir -p "$tmp_dir"
  fi
  
  # Ensure history directory exists for fallback data
  local history_dir="${tmp_dir}/history"
  if [[ ! -d "$history_dir" ]]; then
    mkdir -p "$history_dir"
  fi
  
  # Ensure alerts directory exists for fallback configs
  local alerts_dir="${tmp_dir}/alerts"
  if [[ ! -d "$alerts_dir" ]]; then
    mkdir -p "$alerts_dir"
  fi
}

# Standardize the command format
standardize_args() {
  local args=("$@")
  local new_args=()
  local i=0
  
  while [[ $i -lt ${#args[@]} ]]; do
    local arg="${args[$i]}"
    
    # If this is a known command that doesn't have -- prefix, add it
    if [[ "$arg" != -* && $i -eq 0 ]]; then
      # Common commands to standardize
      case "$arg" in
        status|start|stop|restart|logs|configure|wallet|pulse|dashboard|history|alerts|fleet)
          new_args+=("--$arg")
          ;;
        *)
          new_args+=("$arg")
          ;;
      esac
    else
      new_args+=("$arg")
    fi
    
    i=$((i+1))
  done
  
  echo "${new_args[@]}"
}

# Make sure we can find fallback directories if needed
setup_fallbacks

# If ROOT_DIR is not the expected installation directory, 
# we're likely running from development/source
if [[ "$ROOT_DIR" != "$SYSTEM_INSTALL_DIR" && "$ROOT_DIR" != "$USER_INSTALL_DIR" ]]; then
  # Enable debug mode automatically for development
  if [[ "$DEBUG" != "true" ]]; then
    log_debug "Running from development environment: $ROOT_DIR"
  fi
fi

# Standardize arguments to support both command formats
standardized_args=$(standardize_args "$@")

# Custom run_command function to handle all commands
run_command() {
  # Reset version one more time
  VERSION="v0.0.2"
  
  # Parse global options first
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        DEBUG="true"
        shift
        ;;
      --quiet|-q)
        QUIET="true"
        shift
        ;;
      --help|-h)
        show_help
        return 0
        ;;
      --version|-v)
        # Call our version function directly to ensure the right version is displayed
        original_show_version
        return 0
        ;;
      --install|--uninstall)
        # Already handled in main script
        shift
        ;;
      --fleet)
        shift
        if type fleet_command &>/dev/null; then
          if [[ $# -gt 0 ]]; then
            fleet_command "$@"
            return $?
          else
            fleet_command "help"
            return 0
          fi
        else
          echo -e "${RED}[ERROR] Fleet management is not available.${NC}"
          echo -e "Please check your installation and try again."
          return 1
        fi
        ;;
      *)
        break
        ;;
    esac
  done

  # Call the existing command handler from command.sh
  if type handle_command &>/dev/null; then
    handle_command "$@"
    return $?
  else
    echo -e "${RED}[ERROR] Command handler not found.${NC}"
    return 1
  fi
}

# Run the main command with standardized arguments
run_command $standardized_args
exit $?

# Process command line arguments
process_command() {
  # Parse global options first
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        DEBUG="true"
        shift
        ;;
      --quiet|-q)
        QUIET="true"
        shift
        ;;
      --help|-h)
        show_help
        return 0
        ;;
      --version|-v)
        show_version
        return 0
        ;;
      --install|--uninstall)
        # Already handled in main script
        shift
        ;;
      --fleet)
        shift
        if [[ $# -gt 0 ]]; then
          fleet_command "$@"
          return $?
        else
          fleet_command "help"
          return 0
        fi
        ;;
      *)
        break
            ;;
    esac
  done

  # Handle legacy command format (without leading --)
  if [[ $# -gt 0 && ! "$1" == --* ]]; then
    local cmd="$1"
    shift

    # Convert to flag format
    case "$cmd" in
      help)
        show_help
        return 0
        ;;
      version)
        show_version
        return 0
        ;;
      status)
        cmd="--status"
        ;;
      start)
        cmd="--start"
        ;;
      stop)
        cmd="--stop"
        ;;
      restart)
        cmd="--restart"
        ;;
      logs)
        cmd="--logs"
        ;;
      configure)
        cmd="--configure"
        ;;
      wallet)
        cmd="--wallet"
        ;;
      pulse)
        cmd="--pulse"
        ;;
      dashboard)
        cmd="--dashboard"
        ;;
      history)
        cmd="--history"
        ;;
      alerts)
        cmd="--alerts"
        ;;
      auth)
        cmd="--auth"
        ;;
      fleet)
        if [[ $# -gt 0 ]]; then
          fleet_command "$@"
          return $?
        else
          fleet_command "help"
          return 0
        fi
        ;;
      *)
        echo -e "${RED}Unknown command: $cmd. Run 'pop --help' for usage information.${NC}"
        return 1
        ;;
esac

    # Continue processing with the flag version
    set -- "$cmd" "$@"
  fi
}

# If this script is being run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Process command line arguments
  process_command "$@"
  exit $?
fi
