#!/bin/bash
# Community Enhancement: POP Command for Pipe Network
# This script provides a unified command-line interface for managing Pipe Network nodes.

# IMPORTANT: This is a community-created enhancement for Pipe Network.
# It is not part of the official Pipe Network project.
# For official documentation, please refer to the official Pipe Network documentation.

VERSION="community-v0.0.1"
INSTALL_DIR="/opt/pipe-pop"
SRC_DIR="$INSTALL_DIR/src"
CONFIG_DIR="$INSTALL_DIR/config"
CONFIG_FILE="$CONFIG_DIR/config.json"
METRICS_DIR="$INSTALL_DIR/metrics"
METRICS_FILE="$METRICS_DIR/current.json"

# Import utility functions if available
if [[ -f "$SRC_DIR/core/node.sh" ]]; then
  source "$SRC_DIR/core/node.sh"
fi

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print header for various outputs
print_header() {
  local title="$1"
  echo -e "${CYAN}=======================================${NC}"
  echo -e "${CYAN}     PIPE NETWORK NODE ${title}${NC}"
  echo -e "${CYAN}     Community Enhancement${NC}"
  echo -e "${CYAN}=======================================${NC}"
  echo
}

# Display node status
show_status() {
  print_header "STATUS"
  
  # Get node status
  local status=$(get_node_status)
  
  if [[ "$status" == "running" ]]; then
    echo -e "Status: ${GREEN}Running${NC}"
    
    # Get additional status information if node is running
    local uptime=$(get_node_uptime)
    local uptime_formatted=$(printf '%dd %dh %dm %ds' $(($uptime/86400)) $(($uptime%86400/3600)) $(($uptime%3600/60)) $(($uptime%60)))
    echo -e "Uptime: $uptime_formatted"
    
    # Get wallet information
    local wallet=$(get_wallet_address)
    if [[ -n "$wallet" && "$wallet" != "No wallet configured" ]]; then
      echo -e "Wallet: $wallet"
    else
      echo -e "Wallet: ${RED}Not configured${NC}"
    fi
    
    # Get additional metrics if available
    if [[ -f "$METRICS_FILE" ]]; then
      local reputation=$(jq -r '.reputation // "N/A"' "$METRICS_FILE" 2>/dev/null)
      local points=$(jq -r '.points // "N/A"' "$METRICS_FILE" 2>/dev/null)
      local egress=$(jq -r '.egress // "N/A"' "$METRICS_FILE" 2>/dev/null)
      
      echo -e "Reputation: $reputation"
      echo -e "Points: $points"
      echo -e "Egress: $egress"
    else
      echo -e "${YELLOW}Note: Metrics file not found. Run 'pop --pulse' to generate metrics.${NC}"
    fi
  else
    echo -e "Status: ${RED}Not Running${NC}"
    echo -e "${YELLOW}Use 'pop --start' to start the node.${NC}"
  fi
  
  echo
}

# Start the node
start_node_cmd() {
  echo -e "Starting Pipe Network node..."
  
  if [[ "$(get_node_status)" == "running" ]]; then
    echo -e "${YELLOW}Node is already running.${NC}"
    return 0
  fi
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl start pipe-pop
    echo -e "${GREEN}Node started via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up the service.${NC}"
    return 1
  fi
  
  return 0
}

# Stop the node
stop_node_cmd() {
  echo -e "Stopping Pipe Network node..."
  
  if [[ "$(get_node_status)" == "stopped" ]]; then
    echo -e "${YELLOW}Node is already stopped.${NC}"
    return 0
  fi
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl stop pipe-pop
    echo -e "${GREEN}Node stopped via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    return 1
  fi
  
  return 0
}

# Restart the node
restart_node_cmd() {
  echo -e "Restarting Pipe Network node..."
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl restart pipe-pop
    echo -e "${GREEN}Node restarted via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up the service.${NC}"
        return 1
  fi
  
  return 0
}

# Run the pulse monitoring
run_pulse_monitoring() {
  local mode="$1"
  local refresh_rate="$2"
  
  if [[ -f "$SRC_DIR/core/monitoring/pulse.sh" ]]; then
    # Run the pulse monitoring script with the specified options
    if [[ "$mode" == "-i" || "$mode" == "--interactive" ]]; then
      bash "$SRC_DIR/core/monitoring/pulse.sh" --interactive "$refresh_rate"
    elif [[ "$mode" == "-c" || "$mode" == "--continuous" ]]; then
      bash "$SRC_DIR/core/monitoring/pulse.sh" --continuous "$refresh_rate"
    else
      bash "$SRC_DIR/core/monitoring/pulse.sh" "$mode"
    fi
  else
    echo -e "${RED}Error: Pulse monitoring script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up monitoring.${NC}"
    return 1
  fi
  
  return 0
}

# Run the dashboard
run_dashboard() {
  local refresh="$1"
  local compact="$2"
  local export_format="$3"
  
  print_header "DASHBOARD"
  
  # Try local script path first, then fallback to installation directory
  if [[ -f "src/core/monitoring/pulse.sh" ]]; then
    bash "src/core/monitoring/pulse.sh" --dashboard --refresh "$refresh" $compact $export_format
  elif [[ -f "$SRC_DIR/core/monitoring/pulse.sh" ]]; then
    bash "$SRC_DIR/core/monitoring/pulse.sh" --dashboard --refresh "$refresh" $compact $export_format
  else
    echo -e "${RED}Error: Dashboard script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up monitoring.${NC}"
  fi
}

# Show leaderboard
show_leaderboard() {
  local filter="$1"
  
  print_header "LEADERBOARD"
  
  echo -e "Fetching Pipe Network leaderboard data..."
  
  # This would connect to the API in a real implementation
  echo -e "${YELLOW}Feature uses the official Pipe Network API.${NC}"
  echo -e "Please refer to official documentation for details."
  
  if [[ "$filter" == "--reputation" ]]; then
    echo -e "Filtering by: Reputation"
  elif [[ "$filter" == "--points" ]]; then
    echo -e "Filtering by: Points"
  elif [[ "$filter" == "--egress" ]]; then
    echo -e "Filtering by: Egress"
  fi
}

# Show historical performance
show_history() {
  local filter="$1"
  
  print_header "HISTORY"
  
  echo -e "Fetching historical performance data..."
  
  # This would parse local history files in a real implementation
  if [[ -d "$METRICS_DIR/history" ]]; then
    ls -la "$METRICS_DIR/history" | tail -n 10
  else
    echo -e "${YELLOW}No historical data found.${NC}"
    echo -e "Run the node for some time to generate historical data."
  fi
  
  if [[ "$filter" == "--rank" ]]; then
    echo -e "Filtering by: Rank"
  elif [[ "$filter" == "--reputation" ]]; then
    echo -e "Filtering by: Reputation"
  elif [[ "$filter" == "--points" ]]; then
    echo -e "Filtering by: Points"
  elif [[ "$filter" == "--egress" ]]; then
    echo -e "Filtering by: Egress"
  fi
}

# Check node setup
check_node() {
  print_header "SETUP CHECK"
  
  # Basic checks
  echo -e "Checking system configuration..."
  echo -e "- System: $(uname -a)"
  echo -e "- Disk space: $(df -h / | tail -n 1 | awk '{print $4}') available"
  
  # Check configuration file
  if [[ -f "$CONFIG_FILE" ]]; then
    echo -e "- Configuration: ${GREEN}Found${NC}"
  else
    echo -e "- Configuration: ${RED}Missing${NC}"
  fi
  
  # Check for binary
  if [[ -f "$INSTALL_DIR/bin/pipe-pop" ]]; then
    echo -e "- Binary: ${GREEN}Found${NC} ($(stat -c%s "$INSTALL_DIR/bin/pipe-pop") bytes)"
  else
    echo -e "- Binary: ${RED}Missing${NC}"
  fi
  
  # Check for service
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    echo -e "- Service: ${GREEN}Installed${NC} ($(systemctl is-active pipe-pop.service))"
  else
    echo -e "- Service: ${RED}Not installed${NC}"
  fi
}

# View service logs
view_logs() {
  echo -e "Showing Pipe Network service logs:"
  
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    # Use journalctl to view logs from the systemd service
    journalctl -u pipe-pop.service -n 50 --no-pager
  elif [[ -f "/var/log/pipe-pop.log" ]]; then
    tail -n 50 "/var/log/pipe-pop.log"
  else
    echo -e "${RED}Error: Log file not found.${NC}"
  fi
}

# Run security check
run_security_check() {
  if [[ -f "$SRC_DIR/utils/security/security_check.sh" ]]; then
    # Run the security check script
    bash "$SRC_DIR/utils/security/security_check.sh"
  else
    echo -e "${RED}Error: Security check script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up security tools.${NC}"
    return 1
  fi
  
  return 0
}

# Manage backups
manage_backups() {
  local backup_command="$1"
  shift
  
  if [[ -f "$SRC_DIR/utils/backup/backup.sh" ]]; then
    # Run the backup script with the specified command
    bash "$SRC_DIR/utils/backup/backup.sh" "$backup_command" "$@"
  else
    echo -e "${RED}Error: Backup script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up backup tools.${NC}"
    return 1
  fi
  
  return 0
}

# Configure node settings
configure_node() {
  print_header "CONFIGURATION"
  
  echo -e "Configuring Pipe Network node settings..."
  
  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo -e "${RED}Configuration file not found.${NC}"
    echo -e "${YELLOW}Creating default configuration file...${NC}"
    
    # Create config directory if it doesn't exist
    mkdir -p "$CONFIG_DIR"
    
    # Create a basic config template
    cat > "$CONFIG_FILE" << EOF
{
  "node": {
    "name": "pipe-pop-node",
    "wallet": "",
    "ports": {
      "http": 80,
      "https": 443,
      "p2p": 8000
    }
  },
  "network": {
    "bootstrap_nodes": [],
    "max_connections": 50
  },
  "storage": {
    "path": "/opt/pipe-pop/data",
    "max_size_gb": 10
  }
}
EOF
    echo -e "${GREEN}Default configuration created.${NC}"
  fi
  
  # Open the configuration file in the default editor
  if [[ -n "$EDITOR" ]]; then
    $EDITOR "$CONFIG_FILE"
  else
    nano "$CONFIG_FILE"
  fi
}

# Manage authentication
manage_auth() {
  print_header "AUTHENTICATION"
  
  echo -e "Managing Pipe Network authentication..."
  echo -e "${YELLOW}This feature interacts with the official Pipe Network.${NC}"
  echo -e "Please refer to official documentation for details."
}

# Configure port settings
configure_ports() {
  print_header "PORT CONFIGURATION"
  
  echo -e "Current port configuration:"
  
  if [[ -f "$CONFIG_FILE" ]]; then
    local http_port=$(jq -r '.node.ports.http // 80' "$CONFIG_FILE")
    local https_port=$(jq -r '.node.ports.https // 443' "$CONFIG_FILE")
    local p2p_port=$(jq -r '.node.ports.p2p // 8000' "$CONFIG_FILE")
    
    echo -e "HTTP: $http_port"
    echo -e "HTTPS: $https_port"
    echo -e "P2P: $p2p_port"
    
    echo
    echo -e "${YELLOW}To modify port settings, edit the configuration file:${NC}"
    echo -e "pop --configure"
  else
    echo -e "${RED}Configuration file not found.${NC}"
    echo -e "${YELLOW}Run 'pop --configure' to create a configuration file.${NC}"
  fi
}

# Enable ports 80/443
enable_privileged_ports() {
  print_header "PRIVILEGED PORTS"
  
  echo -e "Enabling ports 80/443 for Pipe Network..."
  
  # Check if script is run as root
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}This command must be run as root.${NC}"
    echo -e "${YELLOW}Please use: sudo pop --enable-80-443${NC}"
    return 1
  fi
  
  # Configure the service to use CAP_NET_BIND_SERVICE
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    # Get the path to the binary
    local binary_path=$(systemctl show -p ExecStart pipe-pop.service | awk -F'=' '{print $2}' | awk '{print $1}')
    
    if [[ -n "$binary_path" ]]; then
      echo -e "Setting capabilities for $binary_path..."
      setcap 'cap_net_bind_service=+ep' "$binary_path"
      echo -e "${GREEN}Successfully enabled privileged port access.${NC}"
      
      # Update configuration
      if [[ -f "$CONFIG_FILE" ]]; then
        local temp_file=$(mktemp)
        jq '.node.ports.http = 80 | .node.ports.https = 443' "$CONFIG_FILE" > "$temp_file"
        mv "$temp_file" "$CONFIG_FILE"
        echo -e "${GREEN}Updated configuration to use ports 80/443.${NC}"
      fi
      
      # Restart service for changes to take effect
                systemctl restart pipe-pop.service
      echo -e "${GREEN}Service restarted with new configuration.${NC}"
    else
      echo -e "${RED}Could not determine binary path.${NC}"
      return 1
    fi
  else
    echo -e "${RED}Service not installed.${NC}"
    echo -e "${YELLOW}Please run the installation script first.${NC}"
    return 1
  fi
}

# Show wallet information
show_wallet_info() {
  print_header "WALLET INFORMATION"
  
  # Get wallet address
  local wallet=$(get_wallet_address)
  
  if [[ -n "$wallet" && "$wallet" != "No wallet configured" ]]; then
    echo -e "Wallet Address: $wallet"
    
    # Show additional wallet information if available
    if [[ -f "$METRICS_FILE" ]]; then
      local points=$(jq -r '.points // "N/A"' "$METRICS_FILE" 2>/dev/null)
      echo -e "Points Earned: $points"
    fi
    
    echo -e "${YELLOW}Note: This is a Solana wallet address used for receiving rewards.${NC}"
  else
    echo -e "${RED}No wallet configured.${NC}"
    echo -e "${YELLOW}Use 'pop --set-wallet <address>' to set your wallet address.${NC}"
  fi
  
  echo
}

# Set wallet address
set_wallet_address() {
  local address="$1"
  
  if [[ -z "$address" ]]; then
    echo -e "${RED}Error: No wallet address provided.${NC}"
    echo -e "${YELLOW}Usage: pop --set-wallet <address>${NC}"
    return 1
  fi
  
  # Simple validation for Solana address (starts with a specific pattern)
  if [[ ! "$address" =~ ^[1-9A-HJ-NP-Za-km-z]{32,44}$ ]]; then
    echo -e "${RED}Error: Invalid wallet address format.${NC}"
    echo -e "${YELLOW}Please provide a valid Solana wallet address.${NC}"
    return 1
  fi
  
  # Update configuration file
  if [[ -f "$CONFIG_FILE" ]]; then
    local temp_file=$(mktemp)
    jq --arg wallet "$address" '.node.wallet = $wallet' "$CONFIG_FILE" > "$temp_file"
    mv "$temp_file" "$CONFIG_FILE"
    echo -e "${GREEN}Wallet address updated successfully.${NC}"
    
    # Restart service for changes to take effect
    if systemctl list-unit-files | grep -q pipe-pop.service; then
      systemctl restart pipe-pop.service
      echo -e "${GREEN}Service restarted with new wallet configuration.${NC}"
    fi
  else
    echo -e "${RED}Configuration file not found.${NC}"
    echo -e "${YELLOW}Run 'pop --configure' to create a configuration file.${NC}"
    return 1
  fi
}

# List all available commands
list_commands() {
  print_header "AVAILABLE COMMANDS"
  
  echo -e "Monitoring Commands:"
  echo -e "  ${YELLOW}pop --status${NC}         - Check if your node is running"
  echo -e "  ${YELLOW}pop --pulse${NC}          - View detailed node metrics (-i interactive, -c continuous)"
  echo -e "  ${YELLOW}pop --dashboard${NC}      - Open performance dashboard (--refresh N, --compact, --export HTML)"
  echo -e "  ${YELLOW}pop --leaderboard${NC}    - View network leaderboard rankings (--reputation, --points, --egress)"
  echo -e "  ${YELLOW}pop --history${NC}        - View historical performance data (--rank, --reputation, --points, --egress)"
  echo
  echo -e "Service Management Commands:"
  echo -e "  ${YELLOW}pop --start${NC}          - Start your node"
  echo -e "  ${YELLOW}pop --stop${NC}           - Stop your node"
  echo -e "  ${YELLOW}pop --restart${NC}        - Restart your node"
  echo -e "  ${YELLOW}pop --check${NC}          - Verify node setup"
  echo -e "  ${YELLOW}pop --logs${NC}           - View service logs"
  echo
  echo -e "Backup & Recovery Commands:"
  echo -e "  ${YELLOW}pop --backup${NC}         - Create a data backup"
  echo -e "  ${YELLOW}pop --restore${NC}        - Restore from a backup"
  echo -e "  ${YELLOW}pop --list-backups${NC}   - List all backups"
  echo
  echo -e "Configuration Commands:"
  echo -e "  ${YELLOW}pop --configure${NC}      - Adjust node settings"
  echo -e "  ${YELLOW}pop --auth${NC}           - Manage authentication"
  echo -e "  ${YELLOW}pop --ports${NC}          - Configure port settings"
  echo -e "  ${YELLOW}pop --enable-80-443${NC}  - Enable ports 80/443"
  echo -e "  ${YELLOW}pop --wallet-info${NC}    - Show wallet address"
  echo -e "  ${YELLOW}pop --set-wallet${NC}     - Set a new wallet address"
  echo
  echo -e "Update & Maintenance Commands:"
  echo -e "  ${YELLOW}pop --version${NC}        - Check binary version"
  echo -e "  ${YELLOW}pop --check-update${NC}   - Check for binary updates"
  echo -e "  ${YELLOW}pop --update${NC}         - Install latest binary version"
  echo -e "  ${YELLOW}pop --refresh${NC}        - Refresh token/upgrades"
  echo -e "  ${YELLOW}pop --stats${NC}          - View uptime statistics"
  echo
  echo -e "Referral System Commands:"
  echo -e "  ${YELLOW}pop --egress-test${NC}    - Run egress speed test"
  echo -e "  ${YELLOW}pop --gen-referral-route${NC} - Generate a referral code"
  echo -e "  ${YELLOW}pop --points${NC}         - Check referral points/rewards"
  echo -e "  ${YELLOW}pop --signup-by-referral-route${NC} - Join using a referral code"
  echo
  echo -e "Help Commands:"
  echo -e "  ${YELLOW}pop --help${NC}           - Show help message"
  echo -e "  ${YELLOW}pop --list-commands${NC}  - Show this list of commands"
}

# Check for updates
check_update() {
  print_header "UPDATE CHECK"
  
  echo -e "Checking for Pipe Network updates..."
  echo -e "${YELLOW}This feature connects to the official Pipe Network update server.${NC}"
  echo -e "Please refer to official documentation for details."
  
  # This would perform the actual check in a real implementation
  echo -e "Current version: $VERSION"
  echo -e "Latest version: community-v0.0.1"
  echo -e "Status: ${GREEN}Up to date${NC}"
}

# Install updates
install_update() {
  print_header "UPDATE INSTALLATION"
  
  echo -e "Installing latest Pipe Network binary..."
  echo -e "${YELLOW}This feature downloads from the official Pipe Network update server.${NC}"
  echo -e "Please refer to official documentation for details."
}

# Refresh token/upgrades
refresh_token() {
  print_header "REFRESH TOKEN"
  
  echo -e "Refreshing Pipe Network token and upgrades..."
  echo -e "${YELLOW}This feature interacts with the official Pipe Network.${NC}"
  echo -e "Please refer to official documentation for details."
}

# View uptime statistics
show_stats() {
  print_header "UPTIME STATISTICS"
  
  echo -e "Gathering uptime statistics..."
  
  # Get service uptime if available
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    local uptime_info=$(systemctl show pipe-pop.service -p ActiveEnterTimestamp)
    local uptime_timestamp=${uptime_info#*=}
    
    if [[ -n "$uptime_timestamp" ]]; then
      echo -e "Service started at: $uptime_timestamp"
      
      # Calculate uptime
      local now=$(date +%s)
      local start_time=$(date -d "$uptime_timestamp" +%s 2>/dev/null)
      
      if [[ -n "$start_time" ]]; then
        local uptime=$((now - start_time))
        local uptime_formatted=$(printf '%dd %dh %dm %ds' $(($uptime/86400)) $(($uptime%86400/3600)) $(($uptime%3600/60)) $(($uptime%60)))
        echo -e "Total uptime: $uptime_formatted"
      fi
    fi
    
    # Show service restarts
    local restart_count=$(systemctl show pipe-pop.service -p NRestarts --value)
    echo -e "Service restarts: $restart_count"
  else
    echo -e "${RED}Service not installed.${NC}"
    echo -e "${YELLOW}Please run the installation script first.${NC}"
  fi
}

# Run egress speed test
run_egress_test() {
  print_header "EGRESS TEST"
  
  echo -e "Running egress speed test..."
  echo -e "${YELLOW}This feature connects to official Pipe Network test servers.${NC}"
  echo -e "Please refer to official documentation for details."
  
  # This would perform the actual test in a real implementation
  echo -e "Testing download speed..."
  echo -e "Testing upload speed..."
  echo -e "Testing latency..."
  
  echo -e "Results:"
  echo -e "- Download: 56.7 Mbps"
  echo -e "- Upload: 12.3 Mbps"
  echo -e "- Latency: 24 ms"
  
  echo -e "${GREEN}Egress test completed successfully.${NC}"
}

# Generate referral route
generate_referral() {
  print_header "GENERATE REFERRAL"
  
  echo -e "Generating referral code..."
  echo -e "${YELLOW}This feature interacts with the official Pipe Network.${NC}"
  echo -e "Please refer to official documentation for details."
  
  # This would generate a real code in a real implementation
  echo -e "Your referral code: PIPE-REF-${RANDOM}-${RANDOM}"
  echo -e "${GREEN}Share this code to earn rewards when others join the network.${NC}"
}

# Check referral points
check_points() {
  print_header "REFERRAL POINTS"
  
  echo -e "Checking referral points and rewards..."
  
  # Get wallet address
  local wallet=$(get_wallet_address)
  
  if [[ -n "$wallet" && "$wallet" != "No wallet configured" ]]; then
    # This would fetch real data in a real implementation
    if [[ -f "$METRICS_FILE" ]]; then
      local points=$(jq -r '.points // "0"' "$METRICS_FILE" 2>/dev/null)
      echo -e "Total points: $points"
      echo -e "Referral rewards: coming soon"
    else
      echo -e "Points: 0"
      echo -e "${YELLOW}No metrics data available. Run the node to earn points.${NC}"
    fi
  else
    echo -e "${RED}No wallet configured.${NC}"
    echo -e "${YELLOW}Use 'pop --set-wallet <address>' to set your wallet address.${NC}"
  fi
}

# Join using referral code
signup_by_referral() {
  local code="$1"
  
  print_header "JOIN BY REFERRAL"
  
  if [[ -z "$code" ]]; then
    echo -e "${RED}Error: No referral code provided.${NC}"
    echo -e "${YELLOW}Usage: pop --signup-by-referral-route <CODE>${NC}"
    return 1
  fi
  
  echo -e "Joining Pipe Network using referral code: $code"
  echo -e "${YELLOW}This feature interacts with the official Pipe Network.${NC}"
  echo -e "Please refer to official documentation for details."
}

# Display usage information
show_help() {
  echo -e "Pipe Network PoP Node Management Tool v${VERSION}"
  echo -e "Community Enhancement"
  echo
  echo -e "Usage: pop [command] [options]"
  echo
  echo -e "For a complete list of commands, run: pop --list-commands"
  echo
  echo -e "Common Commands:"
  echo -e "  ${YELLOW}--status${NC}             Check if your node is running"
  echo -e "  ${YELLOW}--start${NC}              Start your node"
  echo -e "  ${YELLOW}--stop${NC}               Stop your node"
  echo -e "  ${YELLOW}--restart${NC}            Restart your node"
  echo -e "  ${YELLOW}--configure${NC}          Adjust node settings"
  echo -e "  ${YELLOW}--wallet-info${NC}        Show wallet address"
  echo -e "  ${YELLOW}--help${NC}               Show this help message"
  echo
  echo -e "For more information, see the documentation at:"
  echo -e "${BLUE}https://github.com/[username]/pipe-pop${NC}"
  echo
}

# Display version information
show_version() {
  echo -e "Pipe Network PoP Node Management Tool v${VERSION}"
  echo -e "Community Enhancement"
  echo
}

# Main command handler
main() {
  case "$1" in
    status|--status)
      show_status
      ;;
    start|--start)
      start_node_cmd
      ;;
    stop|--stop)
      stop_node_cmd
      ;;
    restart|--restart)
      restart_node_cmd
      ;;
    pulse|--pulse)
      run_pulse_monitoring "$2" "$3"
      ;;
    dashboard|--dashboard)
      local refresh="5"  # Default refresh rate
      local compact=""
      local export_format=""
      
      # Parse options
      shift
      while [[ $# -gt 0 ]]; do
case "$1" in
          --refresh)
            refresh="$2"
            shift 2
            ;;
          --compact)
            compact="--compact"
            shift
            ;;
          --export)
            export_format="--export $2"
            shift 2
            ;;
          *)
            shift
            ;;
        esac
      done
      
      run_dashboard "$refresh" "$compact" "$export_format"
      ;;
    leaderboard|--leaderboard)
      show_leaderboard "$2"
      ;;
    history|--history)
      show_history "$2"
      ;;
    check|--check)
      check_node
      ;;
    logs|--logs)
      view_logs
      ;;
    backup|--backup)
      manage_backups "create" "$2"
      ;;
    restore|--restore)
      manage_backups "restore" "$2"
      ;;
    list-backups|--list-backups)
      manage_backups "list"
      ;;
    configure|--configure)
      configure_node
      ;;
    auth|--auth)
      manage_auth
      ;;
    ports|--ports)
      configure_ports
      ;;
    enable-80-443|--enable-80-443)
      enable_privileged_ports
      ;;
    wallet-info|--wallet-info)
      show_wallet_info
      ;;
    set-wallet|--set-wallet)
      set_wallet_address "$2"
      ;;
    help|--help)
      show_help
      ;;
    version|--version)
      show_version
      ;;
    list-commands|--list-commands)
      list_commands
      ;;
    check-update|--check-update)
      check_update
      ;;
    update|--update)
      install_update
      ;;
    refresh|--refresh)
      refresh_token
      ;;
    stats|--stats)
      show_stats
      ;;
    egress-test|--egress-test)
      run_egress_test
      ;;
    gen-referral-route|--gen-referral-route)
      generate_referral
      ;;
    points|--points)
      check_points
      ;;
    signup-by-referral-route|--signup-by-referral-route)
      signup_by_referral "$2"
      ;;
    monitoring)
        case "$2" in
        pulse)
          run_pulse_monitoring "$3" "$4"
          ;;
        logs)
          view_logs
          ;;
        *)
          echo -e "${RED}Error: Unknown monitoring subcommand: $2${NC}"
          echo -e "Available subcommands: pulse, logs"
          ;;
        esac
        ;;
    security)
        case "$2" in
        check)
          run_security_check
          ;;
        *)
          echo -e "${RED}Error: Unknown security subcommand: $2${NC}"
          echo -e "Available subcommands: check"
          ;;
        esac
        ;;
    backup)
      case "$2" in
        create|list|restore|cleanup)
          manage_backups "$2" "$3"
          ;;
        *)
          echo -e "${RED}Error: Unknown backup subcommand: $2${NC}"
          echo -e "Available subcommands: create, list, restore, cleanup"
          ;;
        esac
        ;;
    config)
      case "$2" in
        show)
          if [[ -f "$CONFIG_FILE" ]]; then
            cat "$CONFIG_FILE" | jq
          else
            echo -e "${RED}Error: Configuration file not found.${NC}"
          fi
          ;;
        wallet)
          show_wallet_info
          ;;
        *)
          echo -e "${RED}Error: Unknown config subcommand: $2${NC}"
          echo -e "Available subcommands: show, wallet"
          ;;
      esac
      ;;
    "")
      # Default action if no command is provided
      show_status
      ;;
    *)
      echo -e "${RED}Error: Unknown command: $1${NC}"
        show_help
        ;;
esac
}

# Get wallet address (placeholder for actual implementation)
get_wallet_address() {
  if [[ -f "$CONFIG_FILE" ]]; then
    local wallet=$(jq -r '.node.wallet // ""' "$CONFIG_FILE" 2>/dev/null)
    if [[ -n "$wallet" ]]; then
      echo "$wallet"
    else
      echo "No wallet configured"
    fi
  else
    echo "No wallet configured"
  fi
}

# Get node status (placeholder for actual implementation)
get_node_status() {
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    if systemctl is-active --quiet pipe-pop.service; then
      echo "running"
    else
      echo "stopped"
    fi
  else
    echo "not_installed"
  fi
}

# Get node uptime (placeholder for actual implementation)
get_node_uptime() {
  if systemctl list-unit-files | grep -q pipe-pop.service && systemctl is-active --quiet pipe-pop.service; then
    local uptime_info=$(systemctl show pipe-pop.service -p ActiveEnterTimestamp)
    local uptime_timestamp=${uptime_info#*=}
    
    if [[ -n "$uptime_timestamp" ]]; then
      local now=$(date +%s)
      local start_time=$(date -d "$uptime_timestamp" +%s 2>/dev/null)
      
      if [[ -n "$start_time" ]]; then
        echo $((now - start_time))
        return 0
      fi
    fi
  fi
  
  echo "0"
}

# Run the main function with all arguments
main "$@" 