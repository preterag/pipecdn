#!/bin/bash
# Pipe Network PoP Node Management Tools
# Main entry script for the command line interface

# Version information
VERSION="v0.0.1"
VERSION_FILE=""

# Set up paths
if [[ -z "$ROOT_DIR" ]]; then
  # Determine script location for relative paths
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

# Define common paths
SRC_DIR="${ROOT_DIR}/src"
TOOLS_DIR="${ROOT_DIR}/tools"
BIN_DIR="${ROOT_DIR}/bin"

# Default installation directories
SYSTEM_INSTALL_DIR="/opt/pipe-pop"
USER_INSTALL_DIR="${HOME}/.local/share/pipe-pop"

# Check for version file
if [[ -f "${BIN_DIR}/version.txt" ]]; then
  VERSION_FILE="${BIN_DIR}/version.txt"
  VERSION=$(cat "$VERSION_FILE")
fi

# Set debug mode if requested
DEBUG="false"
QUIET="false"

# Check for installation commands
if [[ "$1" == "--install" ]]; then
  # Source installation module
  source "${SRC_DIR}/core/install.sh"
  # Call the installation function with remaining arguments
  install_global_command "${@:2}"
  exit $?
elif [[ "$1" == "--uninstall" ]]; then
  # Source installation module
  source "${SRC_DIR}/core/install.sh"
  # Call the uninstallation function with remaining arguments
  uninstall_global_command "${@:2}"
  exit $?
fi

# Source the command parser module
source "${SRC_DIR}/core/command.sh"

# Source the privilege helper if available
if [[ -f "${SRC_DIR}/core/privilege.sh" ]]; then
  source "${SRC_DIR}/core/privilege.sh"
fi

# Source the fleet manager if available
if [[ -f "${SRC_DIR}/fleet/manager.sh" ]]; then
  source "${SRC_DIR}/fleet/manager.sh"
fi

# Setup fallback handlers
setup_fallbacks() {
  # Create a data directory for temporary metrics if it doesn't exist
  local tmp_dir="${HOME}/.cache/pipe-pop/metrics"
  if [[ ! -d "$tmp_dir" ]]; then
    mkdir -p "$tmp_dir"
  fi
  
  # Ensure history directory exists for fallback data
  local history_dir="${tmp_dir}/history"
  if [[ ! -d "$history_dir" ]]; then
    mkdir -p "$history_dir"
  fi
  
  # Ensure alerts directory exists for fallback configs
  local alerts_dir="${tmp_dir}/alerts"
  if [[ ! -d "$alerts_dir" ]]; then
    mkdir -p "$alerts_dir"
  fi
}

# Standardize the command format
standardize_args() {
  local args=("$@")
  local new_args=()
  local i=0
  
  while [[ $i -lt ${#args[@]} ]]; do
    local arg="${args[$i]}"
    
    # If this is a known command that doesn't have -- prefix, add it
    if [[ "$arg" != -* && $i -eq 0 ]]; then
      # Common commands to standardize
      case "$arg" in
        status|start|stop|restart|logs|configure|wallet|pulse|dashboard|history|alerts|fleet)
          new_args+=("--$arg")
          ;;
        *)
          new_args+=("$arg")
          ;;
      esac
    else
      new_args+=("$arg")
    fi
    
    i=$((i+1))
  done
  
  echo "${new_args[@]}"
}

# Make sure we can find fallback directories if needed
setup_fallbacks

# If ROOT_DIR is not the expected installation directory, 
# we're likely running from development/source
if [[ "$ROOT_DIR" != "$SYSTEM_INSTALL_DIR" && "$ROOT_DIR" != "$USER_INSTALL_DIR" ]]; then
  # Enable debug mode automatically for development
  if [[ "$DEBUG" != "true" ]]; then
    log_debug "Running from development environment: $ROOT_DIR"
  fi
fi

# Standardize arguments to support both command formats
standardized_args=$(standardize_args "$@")

# Custom run_command function to handle all commands
run_command() {
  # Parse global options first
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        DEBUG="true"
        shift
        ;;
      --quiet|-q)
        QUIET="true"
        shift
        ;;
      --help|-h)
        show_help
        return 0
        ;;
      --version|-v)
        show_version
        return 0
        ;;
      --install|--uninstall)
        # Already handled in main script
        shift
        ;;
      --fleet)
        shift
        if type fleet_command &>/dev/null; then
          if [[ $# -gt 0 ]]; then
            fleet_command "$@"
            return $?
          else
            fleet_command "help"
            return 0
          fi
        else
          echo -e "${RED}[ERROR] Fleet management is not available.${NC}"
          echo -e "Please check your installation and try again."
          return 1
        fi
        ;;
      *)
        break
        ;;
    esac
  done

  # Call the existing command handler from command.sh
  if type handle_command &>/dev/null; then
    handle_command "$@"
    return $?
  else
    echo -e "${RED}[ERROR] Command handler not found.${NC}"
    return 1
  fi
}

# Run the main command with standardized arguments
run_command $standardized_args
exit $?

# Process command line arguments
process_command() {
  # Parse global options first
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        DEBUG="true"
        shift
        ;;
      --quiet|-q)
        QUIET="true"
        shift
        ;;
      --help|-h)
        show_help
        return 0
        ;;
      --version|-v)
        show_version
        return 0
        ;;
      --install|--uninstall)
        # Already handled in main script
        shift
        ;;
      --fleet)
        shift
        if [[ $# -gt 0 ]]; then
          fleet_command "$@"
          return $?
        else
          fleet_command "help"
          return 0
        fi
        ;;
      *)
        break
        ;;
    esac
  done

  # Handle legacy command format (without leading --)
  if [[ $# -gt 0 && ! "$1" == --* ]]; then
    local cmd="$1"
    shift

    # Convert to flag format
    case "$cmd" in
      help)
        show_help
        return 0
        ;;
      version)
        show_version
        return 0
        ;;
      status)
        cmd="--status"
        ;;
      start)
        cmd="--start"
        ;;
      stop)
        cmd="--stop"
        ;;
      restart)
        cmd="--restart"
        ;;
      logs)
        cmd="--logs"
        ;;
      configure)
        cmd="--configure"
        ;;
      wallet)
        cmd="--wallet"
        ;;
      pulse)
        cmd="--pulse"
        ;;
      dashboard)
        cmd="--dashboard"
        ;;
      history)
        cmd="--history"
        ;;
      alerts)
        cmd="--alerts"
        ;;
      auth)
        cmd="--auth"
        ;;
      fleet)
        if [[ $# -gt 0 ]]; then
          fleet_command "$@"
          return $?
        else
          fleet_command "help"
          return 0
        fi
        ;;
      *)
        echo -e "${RED}Unknown command: $cmd. Run 'pop --help' for usage information.${NC}"
        return 1
        ;;
    esac
    
    # Continue processing with the flag version
    set -- "$cmd" "$@"
  fi
}

# Show help information
show_help() {
  echo "Pipe Network PoP Node Management Tools"
  echo "Usage: pop [--options] [--command] [arguments]"
  echo
  echo "Commands:"
  echo "  --status                Show node status information"
  echo "  --start                 Start node service"
  echo "  --stop                  Stop node service"
  echo "  --restart               Restart node service"
  echo "  --logs [--follow]       View service logs"
  echo "  --configure [--wizard]  Configure node settings"
  echo "  --wallet [--import]     Manage wallet settings"
  echo "  --pulse                 Check node performance"
  echo "  --dashboard             Interactive status dashboard"
  echo "  --history               View historical metrics"
  echo "  --alerts                Manage alert configurations"
  echo "  --auth                  Authenticate sudo access once"
  echo "  --fleet <subcommand>    Manage multiple nodes (see below)"
  echo
  echo "Global Options:"
  echo "  --help, -h              Show this help message"
  echo "  --version, -v           Show version information"
  echo "  --debug                 Enable debug logging"
  echo "  --quiet, -q             Minimize output"
  echo
  echo "Installation Options:"
  echo "  --install [--user]      Install globally or user-only"
  echo "  --install --dir=PATH    Custom installation location"
  echo "  --uninstall             Remove installation"
  echo
  echo "Examples:"
  echo "  pop --status                # Show node status"
  echo "  pop --start                 # Start the node service"
  echo "  pop --configure --wizard    # Run configuration wizard"
  echo "  pop --logs --follow         # View and follow service logs"
  echo "  pop --install --user        # Install for current user only"
  echo
  echo "Fleet Management Commands:"
  echo "  pop --fleet init            # Initialize fleet management"
  echo "  pop --fleet register <n> <ip> <user> [port]  # Register a node"
  echo "  pop --fleet list            # List all registered nodes"
  echo "  pop --fleet test <n>        # Test connection to a node"
  echo "  pop --fleet collect         # Collect metrics from all nodes"
  echo "  pop --fleet collector start [min]  # Schedule metrics collection"
  echo "  pop --fleet collector status       # Check collector status"
  echo "  pop --fleet collector stop         # Stop automatic collection"
  echo "  pop --fleet dashboard       # Display fleet dashboard"
  echo "  pop --fleet exec <n> <cmd>  # Execute command on a node"
  echo "  pop --fleet status          # Show fleet status summary"
  echo
  echo "Group Management Commands:"
  echo "  pop --fleet group create <name> [desc]        # Create a node group"
  echo "  pop --fleet group list                        # List all groups"
  echo "  pop --fleet group show <name>                 # View group details"
  echo "  pop --fleet group add-node <node> <group>     # Add node to group"
  echo "  pop --fleet group remove-node <node> <group>  # Remove from group"
  echo "  pop --fleet group delete <name>               # Delete a group"
  echo "  pop --fleet group exec <group> <cmd>          # Run command on group"
  echo
  echo "Deployment Commands:"
  echo "  pop --fleet deploy <src> <dest> [nodes]       # Deploy to nodes"
  echo "  pop --fleet deploy group <src> <dest> <group> # Deploy to a group"
  echo
  echo "For more information, visit: https://pipenetwork.io/pop-node"
}

# If this script is being run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Process command line arguments
  process_command "$@"
  exit $?
fi
