#!/bin/bash

# PipeNetwork PoP Node Management Tool
VERSION="2.0.0"

# Standard paths
INSTALL_DIR="/opt/pipe-pop"
CONFIG_DIR="${INSTALL_DIR}/config"
CACHE_DIR="${INSTALL_DIR}/cache"
BIN_DIR="${INSTALL_DIR}/bin"

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to check if running as root when needed
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This command must be run as root (with sudo)"
        exit 1
    fi
}

# Function to get node status with colored output
get_node_status() {
    local NODE_STATUS
    NODE_STATUS=$(${BIN_DIR}/pipe-pop --status 2>/dev/null)
    if [ $? -ne 0 ]; then
        print_error "Failed to get node status. Check if pipe-pop is running."
        return 1
    fi
    
    # Extract metrics
    local UPTIME=$(echo "$NODE_STATUS" | grep -i "uptime" | head -n 1)
    local REPUTATION=$(echo "$NODE_STATUS" | grep -i "reputation" | head -n 1)
    local POINTS=$(echo "$NODE_STATUS" | grep -i "points" | head -n 1)
    local EGRESS=$(echo "$NODE_STATUS" | grep -i "egress" | head -n 1)
    
    # Display status in formatted box
    echo -e "\033[1;36m╔═══════════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║           PIPE NETWORK NODE STATUS            ║\033[0m"
    echo -e "\033[1;36m╠═══════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m $UPTIME"
    echo -e "\033[1;36m║\033[0m $REPUTATION"
    echo -e "\033[1;36m║\033[0m $POINTS"
    echo -e "\033[1;36m║\033[0m $EGRESS"
    echo -e "\033[1;36m╚═══════════════════════════════════════════════╝\033[0m"
}

# Function to handle wallet operations
handle_wallet() {
    local operation=$1
    local wallet_address=$2
    
    case $operation in
        "info")
            print_message "Current wallet configuration:"
            if [ -f "${CONFIG_DIR}/config.json" ]; then
                jq -r '.node.wallet_address' "${CONFIG_DIR}/config.json"
            else
                print_error "Configuration file not found"
            fi
            ;;
        "set")
            check_root
            if [ -z "$wallet_address" ]; then
                print_error "No wallet address provided"
                exit 1
            fi
            # Update config.json
            if [ -f "${CONFIG_DIR}/config.json" ]; then
                tmp=$(mktemp)
                jq --arg addr "$wallet_address" '.node.wallet_address = $addr' "${CONFIG_DIR}/config.json" > "$tmp"
                mv "$tmp" "${CONFIG_DIR}/config.json"
                chmod 600 "${CONFIG_DIR}/config.json"
                print_message "Wallet address updated successfully"
                systemctl restart pipe-pop.service
            else
                print_error "Configuration file not found"
            fi
            ;;
    esac
}

# Function to handle security operations
handle_security() {
    local operation=$1
    
    case $operation in
        "check")
            print_message "Running security checks..."
            # Check file permissions
            [ "$(stat -c %a ${CONFIG_DIR}/config.json)" = "600" ] || print_warning "Insecure config.json permissions"
            [ "$(stat -c %a ${BIN_DIR}/pipe-pop)" = "755" ] || print_warning "Insecure binary permissions"
            
            # Check firewall
            ufw status | grep -q "Status: active" || print_warning "Firewall not active"
            
            # Check service status
            systemctl is-active --quiet pipe-pop.service || print_warning "Service not running"
            ;;
        "audit")
            check_root
            print_message "Running security audit..."
            # Comprehensive security check
            ${BIN_DIR}/pipe-pop --security-audit
            ;;
    esac
}

# Function to handle monitoring
handle_monitoring() {
    case $1 in
        "pulse")
            # Get node pulse with real-time updates
            while true; do
                clear
                get_node_status
                echo "Press Ctrl+C to exit"
                sleep 5
            done
            ;;
        "logs")
            journalctl -u pipe-pop.service -n 50 -f
            ;;
    esac
}

# Function to handle updates
handle_update() {
    check_root
    print_message "Checking for updates..."
    
    # Create backup
    print_message "Creating backup..."
    mkdir -p "${INSTALL_DIR}/backups"
    tar -czf "${INSTALL_DIR}/backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "${INSTALL_DIR}" .
    
    # Download and install update
    print_message "Downloading latest version..."
    curl -L "https://github.com/pipe-network/pipe-pop/releases/latest/download/pipe-pop" -o "${BIN_DIR}/pipe-pop.new"
    
    if [ -f "${BIN_DIR}/pipe-pop.new" ]; then
        mv "${BIN_DIR}/pipe-pop.new" "${BIN_DIR}/pipe-pop"
        chmod 755 "${BIN_DIR}/pipe-pop"
        systemctl restart pipe-pop.service
        print_message "Update completed successfully"
    else
        print_error "Update failed"
        exit 1
    fi
}

# Function to show help
show_help() {
    cat << EOF
Pipe Network PoP Node Management Tool v${VERSION}

USAGE:
    pop [COMMAND] [OPTIONS]

COMMANDS:
    status              Show node status
    wallet             Wallet management commands
        info           Show current wallet
        set ADDRESS    Set wallet address
    security           Security management commands
        check         Basic security check
        audit         Full security audit
    monitoring         Monitoring commands
        pulse         Real-time node pulse
        logs          View service logs
    update             Update node software
    points             Show earned points
    referral           Referral management
        code          Show referral code
        generate      Generate new referral code
    backup             Create node backup
    restart            Restart node service
    help               Show this help message

EXAMPLES:
    pop status                     Check node status
    pop wallet set ADDRESS        Set wallet address
    pop security check            Run security check
    pop monitoring pulse          Show real-time pulse
EOF
}

# Main command processing
case "$1" in
    "status")
        get_node_status
        ;;
    "wallet")
        case "$2" in
            "info") handle_wallet "info" ;;
            "set") handle_wallet "set" "$3" ;;
            *) print_error "Unknown wallet command. Use: info or set" ;;
        esac
        ;;
    "security")
        case "$2" in
            "check") handle_security "check" ;;
            "audit") handle_security "audit" ;;
            *) print_error "Unknown security command. Use: check or audit" ;;
        esac
        ;;
    "monitoring")
        case "$2" in
            "pulse") handle_monitoring "pulse" ;;
            "logs") handle_monitoring "logs" ;;
            *) print_error "Unknown monitoring command. Use: pulse or logs" ;;
        esac
        ;;
    "update")
        handle_update
        ;;
    "points")
        ${BIN_DIR}/pipe-pop --points
        ;;
    "referral")
        case "$2" in
            "code") ${BIN_DIR}/pipe-pop --show-referral ;;
            "generate") ${BIN_DIR}/pipe-pop --gen-referral-route ;;
            *) print_error "Unknown referral command. Use: code or generate" ;;
        esac
        ;;
    "backup")
        check_root
        ${BIN_DIR}/pipe-pop --backup
        ;;
    "restart")
        check_root
        systemctl restart pipe-pop.service
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac

exit 0 