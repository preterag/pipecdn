#!/bin/bash
# Community Enhancement: POP Command for Pipe Network
# This script provides a unified command-line interface for managing Pipe Network nodes.

# IMPORTANT: This is a community-created enhancement for Pipe Network.
# It is not part of the official Pipe Network project.
# For official documentation, please refer to the official Pipe Network documentation.

VERSION="community-v0.0.1"
INSTALL_DIR="/opt/pipe-pop"
SRC_DIR="$INSTALL_DIR/src"
CONFIG_DIR="$INSTALL_DIR/config"
CONFIG_FILE="$CONFIG_DIR/config.json"

# Import utility functions if available
if [[ -f "$SRC_DIR/core/node.sh" ]]; then
  source "$SRC_DIR/core/node.sh"
fi

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print header for various outputs
print_header() {
  local title="$1"
  echo -e "${CYAN}╔════════════════════════════════════════════╗${NC}"
  echo -e "${CYAN}║           PIPE NETWORK NODE STATUS            ║${NC}"
  echo -e "${CYAN}║           Community Enhancement            ║${NC}"
  echo -e "${CYAN}╚════════════════════════════════════════════╝${NC}"
  echo
}

# Display node status
show_status() {
  print_header "NODE STATUS"
  
  # Get node status
  local status=$(get_node_status)
  
  if [[ "$status" == "running" ]]; then
    echo -e "Status: ${GREEN}Running${NC}"
    
    # Get additional status information if node is running
    local uptime=$(get_node_uptime)
    local uptime_formatted=$(printf '%dd %dh %dm %ds' $(($uptime/86400)) $(($uptime%86400/3600)) $(($uptime%3600/60)) $(($uptime%60)))
    echo -e "Uptime: $uptime_formatted"
    
    # Get wallet information
    local wallet=$(get_wallet_address)
    if [[ -n "$wallet" && "$wallet" != "No wallet configured" ]]; then
      echo -e "Wallet: $wallet"
    else
      echo -e "Wallet: ${RED}Not configured${NC}"
    fi
    
    # Get additional metrics if available
    if [[ -f "/opt/pipe-pop/metrics/current.json" ]]; then
      local reputation=$(jq -r '.reputation // "N/A"' "/opt/pipe-pop/metrics/current.json" 2>/dev/null)
      local points=$(jq -r '.points // "N/A"' "/opt/pipe-pop/metrics/current.json" 2>/dev/null)
      local egress=$(jq -r '.egress // "N/A"' "/opt/pipe-pop/metrics/current.json" 2>/dev/null)
      
      echo -e "Reputation: $reputation"
      echo -e "Points: $points"
      echo -e "Egress: $egress"
    else
      echo -e "${YELLOW}Note: Metrics file not found. Run 'pop monitoring update' to generate metrics.${NC}"
    fi
  else
    echo -e "Status: ${RED}Not Running${NC}"
    echo -e "${YELLOW}Use 'pop start' to start the node.${NC}"
  fi
  
  echo
}

# Start the node
start_node_cmd() {
  echo -e "Starting Pipe Network node..."
  
  if [[ "$(get_node_status)" == "running" ]]; then
    echo -e "${YELLOW}Node is already running.${NC}"
    return 0
  fi
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl start pipe-pop
    echo -e "${GREEN}Node started via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up the service.${NC}"
    return 1
  fi
  
  return 0
}

# Stop the node
stop_node_cmd() {
  echo -e "Stopping Pipe Network node..."
  
  if [[ "$(get_node_status)" == "stopped" ]]; then
    echo -e "${YELLOW}Node is already stopped.${NC}"
    return 0
  fi
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl stop pipe-pop
    echo -e "${GREEN}Node stopped via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    return 1
  fi
  
  return 0
}

# Restart the node
restart_node_cmd() {
  echo -e "Restarting Pipe Network node..."
  
  # Check if systemd service exists
  if systemctl list-unit-files | grep -q pipe-pop.service; then
    systemctl restart pipe-pop
    echo -e "${GREEN}Node restarted via systemd service.${NC}"
  else
    echo -e "${RED}Error: systemd service not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up the service.${NC}"
    return 1
  fi
  
  return 0
}

# Run the pulse monitoring
run_pulse_monitoring() {
  local refresh_rate="$1"
  
  if [[ -f "$SRC_DIR/core/monitoring/pulse.sh" ]]; then
    # Run the pulse monitoring script with the specified refresh rate
    bash "$SRC_DIR/core/monitoring/pulse.sh" "$refresh_rate"
  else
    echo -e "${RED}Error: Pulse monitoring script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up monitoring.${NC}"
    return 1
  fi
  
  return 0
}

# Run security check
run_security_check() {
  if [[ -f "$SRC_DIR/utils/security/security_check.sh" ]]; then
    # Run the security check script
    bash "$SRC_DIR/utils/security/security_check.sh"
  else
    echo -e "${RED}Error: Security check script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up security tools.${NC}"
    return 1
  fi
  
  return 0
}

# Manage backups
manage_backups() {
  local backup_command="$1"
  shift
  
  if [[ -f "$SRC_DIR/utils/backup/backup.sh" ]]; then
    # Run the backup script with the specified command
    bash "$SRC_DIR/utils/backup/backup.sh" "$backup_command" "$@"
  else
    echo -e "${RED}Error: Backup script not found.${NC}"
    echo -e "${YELLOW}Please run the installation script to set up backup tools.${NC}"
    return 1
  fi
  
  return 0
}

# Show wallet information
show_wallet_info() {
  print_header "WALLET INFORMATION"
  
  # Get wallet address
  local wallet=$(get_wallet_address)
  
  if [[ -n "$wallet" && "$wallet" != "No wallet configured" ]]; then
    echo -e "Wallet Address: $wallet"
    
    # Show additional wallet information if available
    if [[ -f "/opt/pipe-pop/metrics/current.json" ]]; then
      local points=$(jq -r '.points // "N/A"' "/opt/pipe-pop/metrics/current.json" 2>/dev/null)
      echo -e "Points Earned: $points"
    fi
    
    echo -e "${YELLOW}Note: This is a Solana wallet address used for receiving rewards.${NC}"
  else
    echo -e "${RED}No wallet configured.${NC}"
    echo -e "${YELLOW}Use 'pop config wallet <address>' to set your wallet address.${NC}"
  fi
  
  echo
}

# Display usage information
show_help() {
  echo -e "Pipe Network PoP Node Management Tool v${VERSION}"
  echo -e "Community Enhancement"
  echo
  echo -e "Usage: pop [command] [options]"
  echo
  echo -e "Commands:"
  echo -e "  ${YELLOW}Basic Node Management:${NC}"
  echo -e "    status              Show node status"
  echo -e "    start               Start the node"
  echo -e "    stop                Stop the node"
  echo -e "    restart             Restart the node"
  echo
  echo -e "  ${YELLOW}Monitoring:${NC}"
  echo -e "    monitoring pulse    Run real-time monitoring dashboard"
  echo -e "    monitoring logs     Show node logs"
  echo
  echo -e "  ${YELLOW}Security:${NC}"
  echo -e "    security check      Run security checks"
  echo
  echo -e "  ${YELLOW}Backup:${NC}"
  echo -e "    backup create       Create a backup"
  echo -e "    backup list         List available backups"
  echo -e "    backup restore      Restore from a backup"
  echo
  echo -e "  ${YELLOW}Configuration:${NC}"
  echo -e "    config show         Show current configuration"
  echo -e "    config wallet       Show wallet information"
  echo
  echo -e "  ${YELLOW}Help:${NC}"
  echo -e "    help                Show this help message"
  echo -e "    version             Show version information"
  echo
  echo -e "For more information, see the documentation at:"
  echo -e "${BLUE}https://github.com/[username]/pipe-pop${NC}"
  echo
}

# Display version information
show_version() {
  echo -e "Pipe Network PoP Node Management Tool v${VERSION}"
  echo -e "Community Enhancement"
  echo
}

# Main command handler
main() {
  case "$1" in
    status)
      show_status
      ;;
    start)
      start_node_cmd
      ;;
    stop)
      stop_node_cmd
      ;;
    restart)
      restart_node_cmd
      ;;
    monitoring)
      case "$2" in
        pulse)
          run_pulse_monitoring "$3"
          ;;
        logs)
          # Just a simple log viewer for now
          if [[ -f "/var/log/pipe-pop.log" ]]; then
            tail -n 50 "/var/log/pipe-pop.log"
          else
            echo -e "${RED}Error: Log file not found.${NC}"
          fi
          ;;
        *)
          echo -e "${RED}Error: Unknown monitoring subcommand: $2${NC}"
          echo -e "Available subcommands: pulse, logs"
          ;;
      esac
      ;;
    security)
      case "$2" in
        check)
          run_security_check
          ;;
        *)
          echo -e "${RED}Error: Unknown security subcommand: $2${NC}"
          echo -e "Available subcommands: check"
          ;;
      esac
      ;;
    backup)
      case "$2" in
        create|list|restore|cleanup)
          manage_backups "$2" "$3"
          ;;
        *)
          echo -e "${RED}Error: Unknown backup subcommand: $2${NC}"
          echo -e "Available subcommands: create, list, restore, cleanup"
          ;;
      esac
      ;;
    config)
      case "$2" in
        show)
          if [[ -f "$CONFIG_FILE" ]]; then
            cat "$CONFIG_FILE" | jq
          else
            echo -e "${RED}Error: Configuration file not found.${NC}"
          fi
          ;;
        wallet)
          show_wallet_info
          ;;
        *)
          echo -e "${RED}Error: Unknown config subcommand: $2${NC}"
          echo -e "Available subcommands: show, wallet"
          ;;
      esac
      ;;
    help)
      show_help
      ;;
    version)
      show_version
      ;;
    "")
      # Default action if no command is provided
      show_status
      ;;
    *)
      echo -e "${RED}Error: Unknown command: $1${NC}"
      show_help
      ;;
  esac
}

# Run the main function with all arguments
main "$@" 